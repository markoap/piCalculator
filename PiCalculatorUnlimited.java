package com.markoap.app;

import java.math.BigDecimal;
import java.math.MathContext;

public class PiCalculatorUnlimited {

	private final BigDecimal squareRootOfThreeOverEight;
	private final BigDecimal pi;
	private BigDecimal piOverTwelve;
	private long currentTermNumber;
	private BigDecimal currentTerm;
	private BigDecimal currentCoefficientNumerator;
	private BigDecimal currentCoefficientDenominator;
	private BigDecimal currentTermDenominatorPartOne;
	private BigDecimal currentTermDenominatorPartTwo;
	private boolean isTermOdd;
	private MathContext imc;
	
	public PiCalculatorUnlimited() {
		super();
		squareRootOfThreeOverEight = new BigDecimal("0.21650635094610966169093079268823404586785065672629757850697587243"
				+ "14916271136000046351432733446560719594532676769258378787462431368748690598514569390117967060660116539"
				+ "87788197758496852512635584365408126914042908362915360831334031833615229746403380891457545982698502381"
				+ "24831717248242368345629343832200634457729351620076261845027339879063539322869049497912472372806353608"
				+ "93079791146684030204980734819247084947579772942082638553967226117972895127610381906127087529400888930"
				+ "36086998869545724635896062259112436662060535377598301075498592337192197789664728924499122875979837859"
				+ "63173917119541401296340800240613834602889991104695514267775209284401279662428385388248730743449845803"
				+ "61122245184797447987786068566129470042316010080477465430826324612153591081580192278330873025026494355"
				+ "19409805147660816813379398956252086161801935105758909642999970365854328697179795236888765893579843372"
				+ "06824780647356887192237673508312023899527786963881940536546539902471728282020393360525410671458536733"
				+ "12014896312173545494369922682197089816717041407388624569280781043483997006544997211490404462775381628"
				+ "55048239426871384053694900838275313690021995398234095794996910457928885018833231713830916067328240282"
				+ "57277756380046003378718809984100993270726255213158524250238696668277199298670878116505283637929622655"
				+ "79650138981576355336137874650389002625079383970468228006504809443996599917247018632634868731930279157"
				+ "50502356412953945143110855910198661020405648408133330673109699895322080359013905105258502095439637512"
				+ "86789758943939887020530761337992601615211293968662017050051745880388015670404087886532216599503654707"
				+ "47181921369336394677675530288477490409521752383030640568596896078370131667117770267006743255307067675"
				+ "16066625976704181232092050837997167778726495130365691812700175742559943394316818550908967207032795818"
				+ "64583002912575165821800876347960730855653914505846931006255028007998899629527732536502985839383887714"
				+ "61750371085949579375051119145267791781534946042583766837732377535450895952684679366811954494760102663"
				+ "05323308683565326363532919126094576575432584024425506998016114121999351250096507180028755959157350011"
				+ "43929643618443060989464891183238544635924518944222470503275854635600575912117283994821121996995326301"
				+ "98940821972238477918725709800028626915065173669217219420708033808533592862454301744679582592180556978"
				+ "85809736651623162768524674417684771314576869068970411499212445718065329889064886692673373670852178867"
				+ "27830309211577525912387097889426649331054723943248949049103596433689365925330115170570675520557268627"
				+ "52432186774131586253267465807601331339299504007596888242734747855992482744062455206516424644116999277"
				+ "37177080884398404473578683263570021303608700724799256613300928851479173584735195329483394501049595030"
				+ "66865374299235838246928943036792886965730887352693288890759584675848307144725758093093746879431806991"
				+ "41608186487311670715934532871768422794608643547289204201604534879781050204758339508974810910694803664"
				+ "18653261655070744694206392094330548479285414183330569272548852737372911828293127021390252116202432521"
				+ "16507762912996810827895700044584772668038761207108834287070727218069658562695394930156342014975793411"
				+ "08082801658992086783391189312996898660391857741051629068985538961268339279742968410417930815602554745"
				+ "07466608827034363867699607828162819861221058802187750392532785586381005873004054738325842218703387814"
				+ "08882525760783285545825627411136172979000076140358648522960529521173794039086629607672460144086837473"
				+ "64908294105487408770649781877816154474207852043210136141342640847972749312215956810368650548501627229"
				+ "43312401696754098947188473250287052938034499624703364842301855924346731445444011402620414479879320898"
				+ "67691179463008163451066127178122102318786065954311869718113880281280671539450795226293810896989475409"
				+ "89747959387583920125082771957561967208471391156609128099908400198745523672202520142647862374603694878"
				+ "13957048927795624382856253837101621688406465989824787639409692787356485663970449348250390382965762296"
				+ "23128853885651819946854494446446741957921010810263484890588137895394619770054359360370186176932316944"
				+ "52468749121097443874106909279487814762904708577011990690680399943634275849673946340767806661188035121"
				+ "6887974596708251698969032838265403907368133720435164");
		pi = new BigDecimal("3.14159265358979323846264338327950288419716939937510582097494459230781640628620899862803482"
				+ "53421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489"
				+ "54930381964428810975665933446128475648233786783165271201909145648566923460348610454326648213393607260"
				+ "24914127372458700660631558817488152092096282925409171536436789259036001133053054882046652138414695194"
				+ "15116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830"
				+ "11949129833673362440656643086021394946395224737190702179860943702770539217176293176752384674818467669"
				+ "40513200056812714526356082778577134275778960917363717872146844090122495343014654958537105079227968925"
				+ "89235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963"
				+ "18595024459455346908302642522308253344685035261931188171010003137838752886587533208381420617177669147"
				+ "30359825349042875546873115956286388235378759375195778185778053217122680661300192787661119590921642019"
				+ "89380952572010654858632788659361533818279682303019520353018529689957736225994138912497217752834791315"
				+ "15574857242454150695950829533116861727855889075098381754637464939319255060400927701671139009848824012"
				+ "85836160356370766010471018194295559619894676783744944825537977472684710404753464620804668425906949129"
				+ "33136770289891521047521620569660240580381501935112533824300355876402474964732639141992726042699227967"
				+ "82354781636009341721641219924586315030286182974555706749838505494588586926995690927210797509302955321"
				+ "16534498720275596023648066549911988183479775356636980742654252786255181841757467289097777279380008164"
				+ "70600161452491921732172147723501414419735685481613611573525521334757418494684385233239073941433345477"
				+ "62416862518983569485562099219222184272550254256887671790494601653466804988627232791786085784383827967"
				+ "97668145410095388378636095068006422512520511739298489608412848862694560424196528502221066118630674427"
				+ "86220391949450471237137869609563643719172874677646575739624138908658326459958133904780275900994657640"
				+ "78951269468398352595709825822620522489407726719478268482601476990902640136394437455305068203496252451"
				+ "74939965143142980919065925093722169646151570985838741059788595977297549893016175392846813826868386894"
				+ "27741559918559252459539594310499725246808459872736446958486538367362226260991246080512438843904512441"
				+ "36549762780797715691435997700129616089441694868555848406353422072225828488648158456028506016842739452"
				+ "26746767889525213852254995466672782398645659611635488623057745649803559363456817432411251507606947945"
				+ "10965960940252288797108931456691368672287489405601015033086179286809208747609178249385890097149096759"
				+ "85261365549781893129784821682998948722658804857564014270477555132379641451523746234364542858444795265"
				+ "86782105114135473573952311342716610213596953623144295248493718711014576540359027993440374200731057853"
				+ "90621983874478084784896833214457138687519435064302184531910484810053706146806749192781911979399520614"
				+ "19663428754440643745123718192179998391015919561814675142691239748940907186494231961567945208095146550"
				+ "22523160388193014209376213785595663893778708303906979207734672218256259966150142150306803844773454920"
				+ "26054146659252014974428507325186660021324340881907104863317346496514539057962685610055081066587969981"
				+ "63574736384052571459102897064140110971206280439039759515677157700420337869936007230558763176359421873"
				+ "12514712053292819182618612586732157919841484882916447060957527069572209175671167229109816909152801735"
				+ "06712748583222871835209353965725121083579151369882091444210067510334671103141267111369908658516398315"
				+ "01970165151168517143765761835155650884909989859982387345528331635507647918535893226185489632132933089"
				+ "85706420467525907091548141654985946163718027098199430992448895757128289059232332609729971208443357326"
				+ "54893823911932597463667305836041428138830320382490375898524374417029132765618093773444030707469211201"
				+ "91302033038019762110110044929321516084244485963766983895228684783123552658213144957685726243344189303"
				+ "96864262434107732269780280731891544110104468232527162010526522721116603966655730925471105578537634668"
				+ "20653109896526918620564769312570586356620185581007293606598764861179104533488503461136576867532494416"
				+ "6803962657978771855608455296");
		piOverTwelve = new BigDecimal(0.5d).subtract(squareRootOfThreeOverEight);
		currentTermNumber = 1;
		currentTerm = new BigDecimal(0.0d);
		currentCoefficientNumerator = new BigDecimal(1.0d);
		currentCoefficientDenominator = new BigDecimal(1.0d);
		currentTermDenominatorPartOne = new BigDecimal(1.0d);
		currentTermDenominatorPartTwo = new BigDecimal(2.0d);
		isTermOdd = true;
		imc = new MathContext(5001);
	}

	public BigDecimal calculatePi(long numberOfTerms, MathContext mc) {
		for(;currentTermNumber <= numberOfTerms; currentTermNumber++) {
			currentCoefficientNumerator = currentCoefficientNumerator.multiply(new BigDecimal(0.5d).subtract(new BigDecimal(currentTermNumber - 1)));
			currentCoefficientDenominator = currentCoefficientDenominator.multiply(new BigDecimal(currentTermNumber));
			currentTermDenominatorPartOne = currentTermDenominatorPartOne.add(new BigDecimal(2));
			currentTermDenominatorPartTwo = currentTermDenominatorPartTwo.multiply(new BigDecimal(4));
			currentTerm = currentCoefficientNumerator.divide(currentCoefficientDenominator
					.multiply(currentTermDenominatorPartOne)
					.multiply(currentTermDenominatorPartTwo), imc);
			if(isTermOdd) {
				piOverTwelve = piOverTwelve.subtract(currentTerm);
				isTermOdd = false;
			}else {
				piOverTwelve = piOverTwelve.add(currentTerm);
				isTermOdd = true;
			}
		}
		return getPi(mc);
	}
	
	public BigDecimal getLastCalculatedTerm(MathContext mc) {
		return currentTerm.abs(mc);
	}
	
	public BigDecimal getCurrentPiRelativeError(MathContext mc) {
		return getCurrentPiAbsoluteError(mc).divide(pi, mc);
	}
	
	public BigDecimal getCurrentPiAbsoluteError(MathContext mc) {
		return pi.subtract(getPi(mc)).abs( mc);
	}
	
	public BigDecimal getPi(MathContext mc) {
		return piOverTwelve.multiply(new BigDecimal(12.0d), mc);
	}
}
